////////////////////////////////////////////////////////////////////////////////
/// @brief simple arango collection data & metadata exporter
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Alexey Parhomenko
/// @author Copyright 2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_ARANGOIO_DUMP_DUMPCLIENT_H
#define TRIAGENS_ARANGOIO_DUMP_DUMPCLIENT_H 1

#include <stdexcept>
#include <map>
#include "SimpleHttpClient/SimpleHttpClient.h"
#include "SimpleHttpClient/SimpleHttpResult.h"

// -----------------------------------------------------------------------------
// --SECTION--                                                        DumpClient
// -----------------------------------------------------------------------------

namespace triagens {
  namespace arangoio {
    namespace dump {

      class DumpClient {

// -----------------------------------------------------------------------------
// --SECTION--                                        constructors & destructors
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDump
/// @{
////////////////////////////////////////////////////////////////////////////////

        public:

////////////////////////////////////////////////////////////////////////////////
/// @brief create the dump client
////////////////////////////////////////////////////////////////////////////////

          DumpClient (triagens::httpclient::SimpleHttpClient * httpClient);

////////////////////////////////////////////////////////////////////////////////
/// @brief destroy the dump client
////////////////////////////////////////////////////////////////////////////////

          virtual ~DumpClient ();

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDump
/// @{
////////////////////////////////////////////////////////////////////////////////

        public:

////////////////////////////////////////////////////////////////////////////////
/// @brief fetch the names of all collections from server and return them
////////////////////////////////////////////////////////////////////////////////
          
          std::vector<std::string> getCollections () throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @brief get the output path
////////////////////////////////////////////////////////////////////////////////

          std::string getPath () const throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @brief return whether it is allowed to overwrite files in the output path
////////////////////////////////////////////////////////////////////////////////

          bool isRewriteExistsPath ();

////////////////////////////////////////////////////////////////////////////////
/// @brief set the output path
///
/// this will try to create the output path directory if it does not yet exist.
/// if creating the directory fails, or the directory already exists and we
/// disallow overwriting data, an exception will be thrown
////////////////////////////////////////////////////////////////////////////////

          void setPath (std::string path) throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @brief sets the flag whether overwriting existing files in the output
/// path is allowed
////////////////////////////////////////////////////////////////////////////////

          void setRewriteExistsPath (bool isRewrite);

////////////////////////////////////////////////////////////////////////////////
/// @brief save data or metadata to file
/// just dispatches work to other write() method
////////////////////////////////////////////////////////////////////////////////

          void write (const std::string & url, const std::string & fileName)
            throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @brief save data or metadata to file
/// this method does the actual work:
/// - fetch data from URL
/// - save data into file
////////////////////////////////////////////////////////////////////////////////

          void write (const std::string & url, const std::string & fileName,
              bool isMetaData) throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @brief fetch collection metadata from the server and write it to an
/// output file
////////////////////////////////////////////////////////////////////////////////

          void dumpMetadata (const std::string & collection) throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                 protected methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDump
/// @{
////////////////////////////////////////////////////////////////////////////////

        protected:

////////////////////////////////////////////////////////////////////////////////
/// @brief return an absolute filename for a collection
////////////////////////////////////////////////////////////////////////////////

          std::string getFilename (const std::string& collection,
                                   const bool isMetaData) const;

////////////////////////////////////////////////////////////////////////////////
/// @brief send request to server and get result
////////////////////////////////////////////////////////////////////////////////
        

          void sendRequest (const std::string & url,
                            const triagens::rest::HttpRequest::HttpRequestType type) throw (std::runtime_error);

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                               protected variables
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDump
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief the http client we use to transfer data to/from the server
////////////////////////////////////////////////////////////////////////////////

          triagens::httpclient::SimpleHttpClient * httpClient_;

////////////////////////////////////////////////////////////////////////////////
/// @brief the result of the last transfer
////////////////////////////////////////////////////////////////////////////////

          triagens::httpclient::SimpleHttpResult * httpResult_;

////////////////////////////////////////////////////////////////////////////////
/// @brief whether or not we allow overwriting existing files in the output path
////////////////////////////////////////////////////////////////////////////////
          
          bool rewriteExistsPath_;

////////////////////////////////////////////////////////////////////////////////
/// @brief output directory
////////////////////////////////////////////////////////////////////////////////

          std::string path_;

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

      };

    } /* namespace dump */
  } /* namespace arangoio */
} /* namespace triagens */

#endif /* TRIAGENS_ARANGOIO_DUMP_DUMPCLIENT_H */

// -----------------------------------------------------------------------------
// --SECTION--                                                       END-OF-FILE
// -----------------------------------------------------------------------------

// Local Variables:
// mode: outline-minor
// outline-regexp: "^\\(/// @brief\\|/// {@inheritDoc}\\|/// @addtogroup\\|// --SECTION--\\|/// @\\}\\)"
// End:
