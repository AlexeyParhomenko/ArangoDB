////////////////////////////////////////////////////////////////////////////////
/// @brief resource holder for AQL queries with auto-free functionality
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2012 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_ARANGOD_UTILS_AHUACATL_GUARD_H
#define TRIAGENS_ARANGOD_UTILS_AHUACATL_GUARD_H 1

#include "Ahuacatl/ahuacatl-context.h"
#include "VocBase/vocbase.h"

#include "Logger/Logger.h"

namespace triagens {
  namespace arango {

// -----------------------------------------------------------------------------
// --SECTION--                                               class AhuacatlGuard
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @brief scope guard for a TRI_aql_context_t*
////////////////////////////////////////////////////////////////////////////////

    class AhuacatlGuard {

// -----------------------------------------------------------------------------
// --SECTION--                                        constructors / destructors
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDB
/// @{
////////////////////////////////////////////////////////////////////////////////
  
      public:

////////////////////////////////////////////////////////////////////////////////
/// @brief create the guard
////////////////////////////////////////////////////////////////////////////////

        AhuacatlGuard (TRI_vocbase_t* vocbase, const string& query) : 
          _context(0) {
            _context = TRI_CreateContextAql(vocbase, query.c_str());

            if (_context == 0) {
              LOGGER_DEBUG("failed to create context for query %s" << query);
            }
          }

////////////////////////////////////////////////////////////////////////////////
/// @brief destroy the guard
////////////////////////////////////////////////////////////////////////////////

        ~AhuacatlGuard () {
          this->free();
        }

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDB
/// @{
////////////////////////////////////////////////////////////////////////////////
  
      public:

////////////////////////////////////////////////////////////////////////////////
/// @brief free the context
////////////////////////////////////////////////////////////////////////////////

        void free () {
          if (_context != 0) {
            TRI_FreeContextAql(_context);
            _context = 0;
          }
        }

////////////////////////////////////////////////////////////////////////////////
/// @brief access the context
////////////////////////////////////////////////////////////////////////////////

        inline TRI_aql_context_t* ptr () const {
          return _context;
        }

////////////////////////////////////////////////////////////////////////////////
/// @brief return whether context is valid
////////////////////////////////////////////////////////////////////////////////

        inline const bool valid () const {
          return _context != 0;
        }

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup ArangoDB
/// @{
////////////////////////////////////////////////////////////////////////////////

      private:

////////////////////////////////////////////////////////////////////////////////
/// @brief the AQL context C struct
////////////////////////////////////////////////////////////////////////////////

        TRI_aql_context_t* _context;

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

    };
  }
}

#endif

// Local Variables:
// mode: outline-minor
// outline-regexp: "^\\(/// @brief\\|/// {@inheritDoc}\\|/// @addtogroup\\|// --SECTION--\\|/// @\\}\\)"
// End:
